Software Requirements Specification
This SRS identifies the behavior of SitesWrapper, including a set of use cases that describe the interactions users will have with various components of the software system. This SRS also contains nonfunctional requirements. Non-functional requirements impose constraints on the design or implementation (such as performance engineering requirements, quality standards, or design constraints) .
SitesWrapper
Version 1.0
May 1, 2014
Prepared by Todd Url
1. Introduction
SitesWrapper™ is a “look and feel” customizable Google App Engine based Google Web Toolkit web application which wraps and leverages one or more Google Sites to provide a Google Apps based content management system. The web app components of SitesWrapper are configured to present content 

 which employs a collection of commercially available Android, iOS and Apps Script based configuration clients.
The application is composed of an HTML5 web app which wraps zero or more Google Sites, as well as a collection client apps used to configure the look, feel, style and content of the webapp wrapper.
Content developed in Google Apps (or reference-able via URL), is used to decorate the content of the wrapper, as well as the content of each Google Site wrapped by the wrapper, via the configuration clients.
1.1 Purpose
The purpose of this document is to thoroughly describe, through the use of specifically specified requirements, the functionality of SitesWrapper, a collection of software items which leverages Google products and services to deliver a professional looking, feature rich internet presence to organizations of any type, size or financial position.
In addition, by defining the functional requirements as a set of use cases describing the interactions users will have with each software item, this document will serve as the definitive basis for all “functional test” cases, procedures, scripts, suites and coverage metrics. Other types of testing are beyond the scope of this document.
1.2 Definitions
wrap·per  (răp′ər)
Client Wrapper - The client side software component which executes in the desktop or mobile browser. The client wrapper is a Google Web Toolkit module having one or more views decorated with information items. Each view (or page) can wrap one or more Google Sites, presenting them as a coherent, sorted collection of Google Apps managed content.
Server Services Wrapper - The server side components which generate a simple yet complete and useful server based HTML only website for browsers which don’t use JavaScript to render a page. In this case, SitesWrapper generates an HTML website having one or more views decorated with information items. Each view (or page) can wrap one or more Google Sites, presenting them as a GoogleBot crawlable collection of Google Apps managed content.
in·for·ma·tion i·tem  (ĭn′fər-mā′shən) (ī′təm)
A URL referenceable resource. An information item of any type may reside anywhere in the internet. However, an information item’s attributes are defined via a configuration client and stored as a persistent object in the Google Datastore.
con·fig·u·ra·tion cli·ent (kən-fĭg′yə-rā′shən) (klī′ənt)
A platform specific software item which reflects, and is used to maintain, the state of the configuration Entity objects in the Google Datastore via Google Cloud Endpoints.
1.3 System Overview
Creative content is generated using Google Apps and hosted as URL referenceable information items in Google Drive, Google+, Picasa Web and virtually any other web service including Google Sites. URL references and other attributes of the creative content are entered into various “forms” accessible via one or more configuration clients. The configuration clients Create, Read, Update and Delete entity objects in the Google Datastore via Google Cloud Endpoints. The entity objects are used by the Server and Client Wrappers to render HTML and JavaScript frontends respectively, each of which presents essentially the same webapp in terms of functionality via different paradigms depending on whether the site is accessed by a JavaScript enabled browser. That is, if the App Engine based website is accessed via a JavaScript enabled browser, a browser independent GWT webapp is rendered following the MVP design pattern. If the App Engine based website is accessed by an HTML only browser, the Googlebot for example, an HTML only webapp is rendered following the MVC design pattern. Authentication and authorization is handled exclusively via Google Accounts using OAuth 2.0 and the Google+ signin button.

1.4 References
Google App Engine - Google App Engine is a Platform as a Service (PaaS) offering that lets you build and run applications on Google’s infrastructure.
Android - Develop a mobile backend using custom code with Google Cloud Endpoints.
Apps Script - Build an add-on for Google Apps Sheet.
iOS - Apple's developer guides include overviews, tutorials, programming guides, and, for developer tools, user guides.
Google Web Toolkit - GWT is a development toolkit for building and optimizing complex browser-based applications.
2. Overall Description
What makes SitesWrapper different is that the overall look and feel of the presentation interface can be changed to match some of the webs most popular sites without affecting the content or functionality. The content on the other hand, which is generated using Google Apps and deployed as a collection of Google Sites, gets “wrapped” and presented homogeneously as a SitesWrapper site. The configuration of a SitesWrapper site (as opposed to the content), is dictated by the application data model which is maintained as a collection of persistent objects in the Google App Engine Datastore and updated by the individual configuration clients via Google Cloud Messaging.
2.1 Product Perspective
SitesWrapper is composed of five distinct software components. Two of the components, the server service wrapper and the client wrapper share a common source tree and are maintained as part of the same eclipse project, SitesWrapper-AppEngine-GWT. The other three items, which are maintained and distributed separately, are the Android, iOS and Apps Script based configuration clients; SitesWrapper-Android, SitesWrapper-iOS and SitesWrapper-AppsScript respectively. 
SitesWrapper-AppEngine-GWT
Server Service Wrapper - Although technically in the same source tree and maintained as part of the same eclipse based project as the client wrapper, the server service wrapper is the server side Java component which provides MVC based HTML only web services as well service access to the datastore entity objects via endpoints. Additionally each MVC based HTML page view generated by the server in response to an HTTP GET is also a fully functional GWT host page. This dual nature is what enables the client wrapper to be accessed from any server service wrapper generated landing page.
Client Wrapper - The client wrapper portion of the project is defined by source path entries of the GWT module SitesWrapper-AppEngine-GWT.gwt.xml which identify the subpackages containing GWT translatable source code. Although written in Java, the client wrapper is translated into JavaScript and executed by the client browser as part of the host/landing page when loaded by a browser which supports JavaScript.
SitesWrapper-Android
Android Configuration Client - Available on Google Play, the Android Configuration Client provides administrators the ability to configure a SitesWrapper site using the familiar Android app settings screens. The app contains settings screens covering all aspects of the site as well as the ability to add or remove pages or Google Sites within pages. Settings defined in the setting screens of the configuration client reflect and automatically update the current state entity objects in the GAE datastore. Changes made via other configuration clients as well as select application alerts are propagated to the Android Configuration Client via Google Cloud Messaging and Google Wear.
SitesWrapper-iOS
iOS Configuration Client - Available in The App Store, the iOS Configuration Client provides administrators the ability to configure a SitesWrapper site using the familiar iOS app settings screens. The app contains settings screens covering all aspects of the site as well as the ability to add or remove pages or Google Sites within pages. Settings defined in the setting screens of the configuration client are propagated on demand to the entity objects in the GAE datastore.
SitesWrapper-AppsScript
AppsScript Configuration Client - Available as a free Add-on, the Apps Script Configuration Client provides administrators the ability to configure a SitesWrapper site using a Google Apps spreadsheet. The spreadsheet covers all aspects of the site as well as the ability to add or remove pages or Google Sites within pages. Settings defined by the spreadsheet are propagated on demand to the entity objects in the GAE datastore.
2.1.1 System Interfaces
Describing SitesWrapper’s system interfaces from a product perspective reveals the following primary interfaces.
Android Configuration Client to Server Service Wrapper
iOS Configuration Client to Server Service Wrapper
AppScript Configuration Client to Server Service Wrapper
End user web browser to Server Service Wrapper
Client Wrapper to Server Service Wrapper
Server Service Wrapper to Android Configuration Client
Android Configuration Client to Wear Alert Handler
2.1.2 User Interfaces
From a product perspective SitesWrapper provides the following user interfaces.
Service Server Wrapper HTML only web page based end user interface
Client Wrapper AJAX style web page based end user interface
Android Configuration Client an Android app preferences API style end user interface that’s consistent with the end user experience in other Android apps including the system settings
iOS Configuration Client uses the Cocoa preferences system (aka, the user defaults system) to provide an interface that's consistent with the user experience in other iOS apps
AppScript Configuration Client uses a Google Apps spreadsheet based user interface
2.1.3 Hardware Interfaces
SitesWrapper does not impose any hardware interface requirements outside of those needed to support the communication interface requirements specified in section 2.1.5 of this document.
2.1.4 Software Interfaces
2.1.4.1 Server Service Wrapper
The Server Service Wrapper is deployed as an Google App Engine instance and makes use of the following software interfaces;
Java Servlets API
App Engine Scalable Datastore
Java OAuth
Java Persistence API
Google Cloud Endpoints
2.1.4.2 Client Wrapper
The Client Wrapper makes use of the following software interfaces:
GWT RPC libraries
Dictionary

2.1.4.3 Android Configuration Client
The Android Configuration Client makes use of the following software interfaces:
Cloud Endpoint Client Libraries
Cloud Messaging
Wear
2.1.4.4 iOS Configuration Client
The iOS Configuration Client makes use of the following software interfaces:
Cloud Endpoint Client Libraries
2.1.4.5 AppScript Configuration Client
The AppScript Configuration Client makes use of the following software interfaces:
UrlFetchApp class
2.1.5 Communication Interfaces
The software based communication interfaces for all components depend upon availability of an active TCP/IP connection. SitesWrapper has no provisions for off-line capabilities side from failing gracefully when communication dependent functionality is accessed while TCP/IP communication facilities are unavailable.
2.1.6 Memory Constraints
SitesWrapper is not expected to place excessive demands on system memory and is expected to behave appropriately on a per platform basis memory management systems indicate memory is unavailable. For example, Android sets a hard limit on the heap size for each app. The exact heap size limit varies between devices based on how much RAM the device has available overall. If your app has reached the heap capacity and tries to allocate more memory, it will receive an OutOfMemoryError.
2.1.7 Operations
SitesWrapper operations are handled via the AppEngine Admin Console. The App Engine Admin Console gives you complete access to the Server Service Wrapper. Access the Console is provided by visiting the following link in your web browser and signing in with your Google account:
https://appengine.google.com/
If you are using App Engine with your Google Apps account, you can sign in to App Engine for your domain using a URL similar to the following, where your-domain.com is your Google Apps domain:
https://appengine.google.com/a/your-domain.com
You can use the Administration Console to:
Perform basic configuration (change application title, cookie expiration, authentication options, etc.).
Set application performance options to manage cost and performance.
View configured services.
Set a new host domain.
Disable datastore writes.
Disable or delete your application
Administer your datastore, backup/restore, copy and delete data.
Migrate from the Master/Slave to the High Replication Datastore.
Split traffic between different versions of your application.
View application instances.
View resource utilization and performance statistics.
Experimental: Report problems via the Report Production Issue button. This is for reporting problems with the service; e.g., if you haven't changed your program but suddenly see spikes in latency or errors.
Change user roles, invite other people to be developers for your application, so they can access the Console and upload new versions of the code.
Create a new application with a free appspot.com sub-domain, or a top-level domain name of your choosing.
View request and error logs, and analyze traffic.
Manage task queues, allowing for pausing, purging, and deleting queues.
Manage individual tasks in a task queue, allowing for viewing, deleting, or running individual tasks immediately.
Test new versions of your application, and switch the version that your users see.
View Memcache statistics, flush the cache, view and edit Memcache values.
See Uploading an App (Java), Uploading an App (Python), or Uploading an App (Go) for information about uploading your application's code to App Engine and other features for interacting with your live application.
2.1.8 Site Adaptation Requirements
Because SitesWrapper is itself a site adaption system, all site adaptation requirements are dictated by the functionality of SitesWrapper.
2.2 Product Functions
2.2.1 SitesWrapper-AppScript
Provides administrators the ability to configure a SitesWrapper site using a Google Apps spreadsheet.
2.2.1 SitesWrapper-Android
Provides administrators the ability to configure a SitesWrapper site using an Android app available on Google Play.
2.2.2 SitesWrapper-iOS
Provides administrators the ability to configure a SitesWrapper site using an iOS app available in the App Store.
2.2.3 SitesWrapper-AppEngine-GWT
Provides organizations with a “look and feel customizable” Google App Engine based webapp which renders as both an AJAX as well as an HTML style webapp in which each landing page can be decorated and capable of wrapping one or more Google Sites based websites.
2.3 User Characteristics
2.4 Constraints, Assumptions and Dependencies
Constraints
Functional UI test suite for each component
100% functional coverage
Verified end to end
Uiautomator input output verified using Selenium
Unit test suite for each component
100% method coverage
Assumptions
Version control
Project hosting
Continuous Integration
Integration build and system testing will be managed by either Jenkins or Hudson or both (Jenkins/Hudson compatible scripting).
Dependencies
Apache Maven will be used as the software project and dependency management toolkit for SitesWrapper as it is capable of building WAR files for deployment into App Engine and GWT as well as Android and iOS projects.

List permissions required and explanations for each
On Google Play
In the App Store
On Google Code
3. Specific Requirements
3.1 External Interface Requirements
Requirements placed on the external interfaces of the system are consistent with the character of the respective component.
3.1.1 Android Configuration Client
Android provides a framework for creating user interfaces which is documented in the “Best Practices for User Interfaces” section of the Android developers website. This section, as well as all other “best practices” identified for Android programs will be adhered to.
3.1.2 iOS Configuration Client
Likewise, all “Best Practices for iOS user experiences” will be adhered to.
3.1.3 Apps Script Configuration Client
In the case of the AppScript Configuration client, “best practices” for an HTML interface are identified in the HTML Services section of the Apps Script developers site.
3.1.4 Server Service Wrapper
The Server Service Wrapper presents three external interfaces; the GWT RPC which supports Client Wrapper API based communication with the Server Service Wrapper, Google Cloud Endpoints which provides a RESTful JSON based API to the configuration clients, and the HTML based user interface must adhere to the following “non functional” requirements.
3.1.4.1 Respect information items, landing pages, pages and sites configuration attributes
3.1.4.2 Generate acurate and relatant sitemap.xml data on demand
3.1.4.3 Generate GWT Host Page for all configured pages and landing pages
3.1.4.4 The Site must deploy to the Google App Engine application id specified for the attribute “App Engine Application ID” for the currently authenticated Google ID
3.1.4.5 The Site must deploy to the Google App Engine application id version for the attribute “App Engine Application Version” for the currently authenticated Google ID
3.1.5 Client Wrapper
The external interface of the Client Wrapper represents the “webapp” feature functionality of SitesWrapper and must adhere to the following “non functional” requirements.
3.1.5.1 Must render a completely functional site based on the contents of the configuration datastore regardless of the configured look and feel
3.1.5.2 The Site must adhere to the value specified for the attribute “Site Name”
3.1.5.3 The Site must deploy to the Google App Engine 

3.2 Functional Requirements
3.2.1 Use Cases
A use case is a structure for documenting the functional requirements for a system, usually involving software, whether that is new or being changed. Each use case provides a set of scenarios that convey how the system should interact with a human user or another system, to achieve a specific business goal. Use cases typically avoid technical jargon, preferring instead the language of the end-user or domain expert. Use cases are often co-authored by requirements engineers and stakeholders.
Use cases are deceptively simple tools for describing the behavior of software or systems. A use case contains a textual description of the ways in which users are intended to work with the software or system. Use cases should not describe internal workings of the system, nor should they explain how that system will be implemented. Instead, they show the steps needed to perform a task.
3.3 Performance Requirements
3.4 Design Constraints
The primary constraints with respect to design of the system are defined within the realms of standards compliance and architectural imposition.
3.4.1 Standards Compliance
All software requirements will be collected and maintained as defined in the ANSI/IEEE 830 standard for software requirements specifications.
All software test documentation will adhere to the requirements specified in the ANSI/IEEE 829 standard for software test documentation.
3.4.2 Architecturally Imposed Constraints
The following 
3.5 Logical Database Requirements
The Google App Engine Datastore shall contain the following application data model.

3.5.1 Site
A singleton which holds the following global data relevant to the current configuration of the webapp.
3.5.1.1 Name
Holds the name to be used throughout the site. For example, it could be the name of a company, organization or person the site represents.
3.5.1.2 Application ID
Holds the Google App Engine application id to which the site should be deployed. See the App Engine dashboard and documentation for more information.
3.5.1.3 Application Version
Holds the Google App Engine application id version number which the site should be deployed as. See the App Engine dashboard and documentation for more information.
3.5.1.4 Look and Feel
Selects from a list of available look and feels.
3.5.1.5 Google Sites Theme
Specifies what Google Sites theme to expect Google Sites sites to use.
3.5.1.6 Google Web Fonts Url
Holds the value to have specified in the host page to make use of Google Web Fonts (e.g.; http://fonts.googleapis.com/css?family=Aldrich|Raleway:100|Open+Sans:300,400).
3.5.1.7 Favicon Url
Holds the url for specifying the webapps favicon (e.g.; http://ghostgames.com/favicon.ico).
3.5.1.8 Apple Touch Icon
Holds the url which specifies the Apple Touch Icon to use for the webapp (e.g.; http://ssl.gstatic.com/sites/p/fff931/system/app/images/apple-touch-icon.png).
3.5.1.9 Default Page
Select from the list of available pages (e.g.; About Us).
3.5.1.10 Landing Display Style
Select from the list of available styles of use when generating landing pages (i.e.; Bottom, None).
3.5.1.11 Revision History Enabled
Selectable between “yes” and “no”.
3.5.1.12 Logo Type
Selectable between “image” and “html”.
3.5.1.13 Logo Image
Holds the url which specifies a logo image (e.g.; http://ngm.com/125/flashback-firsts/img/05-flashback-125-machu-picchu.jpg).
3.5.1.14 Logo Html
Holds the html to be used as a logo (e.g.; <h1><span style='font-family:Aldrich,arial,sans-serif;font-style:italic;font-weight:normal'><font color=#ffffff>The</font><font color=#00ff00>Green</font><font color=#ffffff>URL</font></span><sup><font color=#ffffff size=2>&reg;</font></sup></h1>).
3.5.1.15 Footer Html
Holds the html to be used as the webapps footer (e.g.; <p><span class="sites-system-link">Powered By</span> <b class="powered-by"><a href="http://toddurl.appspot.com">URL IS/IT</a></b></p>).
3.5.1.16 GWT RPC Error Message
Text message to display in case of RPC failure (e.g.; Network Error - Check your network connection).
3.5.2 Style
A singleton which holds data intended to modify the currently selected look and feel.
3.5.2.1 Look And Feel
Specifies the Look And Feel the Style entry should be applied to (i.e.; must be one of the values available for selection for the Look And Feel member of Site).
3.5.2.2 Description
A description of the Look And Feel specified in the Look And Field member of the Style object (e.g.; Reminiscent of www.usa.lighting.philips.com).
3.5.2.3 Primary Color
Html specified color to be used as the primary color for the specified Look And Feel (e.g.; #ffffff).
3.5.2.4 Primary Accent Color
Html specified value to use for accenting the primary color selected for the specified Look And Feel (e.g.; #228B22).
3.5.2.5 Secondary Accent Color
Html specified value to use for accenting the primary color selected for the specified Look And Feel (e.g.; #4169E1).
3.5.2.6 Tertiary Accent Color
Html specified value to use for accenting the primary color selected for the specified Look And Feel (e.g.; #00ff00).
3.5.2.7 Main Menu Font Family
Google Web Font family to use for the specified Look And Feel. Must be available as specified by the Google Web Font Url member of the Site object.
3.5.2.8 Main Menu Font Size
Size in px to use for the font size of the main menu for the specified Look And Feel.
3.5.2.9 Main Menu Selection Font Color
Html specified color to use when the main menu item is not-selected for the specified Look And Feel (e.g.; #228B22).
3.5.2.10 Main Menu Hover Font Color
Html specified color to use for the main menu item when the cursor is hovering over it for the specified Look And Feel (e.g.; #0000ff).
3.5.2.11 Main Menu Selected Font Color
Html specified color to use when the main menu item is selected for the specified Look And Feel (e.g.; #00ff00).
3.5.3 Item
A collection of information items for use in decorating the webapp.
3.5.3.1 Name
Human friendly name of the information item.
3.5.3.2 Type
Selection from available Item Types (e.g.; Page, Video, Text).
3.5.3.3 Description
Human reader friendly description of the of the Item, often used as a caption for example (e.g.; The 18 SMT Standard Light Bulb LED lamp).
3.5.3.4 Video Url
Url which references a video for Items of Type Video.
3.5.3.5 Image Url
Url which references a picture for Items of Type Image.
3.5.3.6 Link Name
Name in text to display as the name of the link to the information Item (e.g.; See spot run).
3.5.3.7 Link Url
Url used to reference this information Item.
3.5.3.8 Specification 1 to 
The name portion of the name/value pair used to specify a name value pair.
3.5.3.8 Value 1 to 
The value portion of the name/value pair used to specify a name value pair.
3.5.4 Landing
A collection of information items for use in decorating the webapp.
3.5.4.1 Name
Human friendly name of the information item.
3.5.4.2 Type
Selection from available Item Types (e.g.; Page, Video, Text).
3.5.4.3 Description
Human reader friendly description of the of the Item, often used as a caption for example (e.g.; The 18 SMT Standard Light Bulb LED lamp).
3.5.4.4 Video Url
Url which references a video for Items of Type Video.
3.5.4.5 Image Url
Url which references a picture for Items of Type Image.
3.5.4.6 Link Name
Name in text to display as the name of the link to the information Item (e.g.; See spot run).
3.5.4.7 Link Url
Url used to reference this information Item.
3.5.4.8 Specification 1 to 
The name portion of the name/value pair used to specify a name value pair.
3.5.4.8 Value 1 to 
The value portion of the name/value pair used to specify a name value pair.
3.5.5 Page - NEEDS BETTER EXPLANATION
Main pages to be displayed and selected between using the main menu (e.g.; About Us, Contact). Each Page can be decorated and populated with content specific information by specifying values for the attributes defined in this section. In addition to the main menu (used to navigate between pages), a Page may be specified to contain one or more <iframe> style disclosures or “animated subwindow” which can be activated via a button or menu selection and which are configured to display “in the AJAX style” (i.e.; without refreshing the page), a Google Sites site or some other url referenceable website or web app. 
3.5.5.1 Name
Name of the page or view to be displayed by either the Client or Server Service Wrapper (e.g.; About Us, Contact)
3.5.5.2 Show_Page Title
Yes or no, display the name as the title of the view or page.
3.5.5.3 Logo Type
Selection from one of type image or html.
3.5.5.4 Logo Image
Url referencing the image to be used for a page specific logo.
3.5.5.5 Logo Html
Html to be used for a page specific logo.
3.5.5.6 Language Translation Enabled
Boolean selection between yes and no.
3.5.5.7 Translated Languages
A collection of language codes to make available via Google Translation.
3.5.5.8 Custom Search Enabled
Selection of yes or no as to whether Google Custom Search should be enabled for the overall webapp. (Note - Switch does not affect the Google Sites site specific settings such as search)
3.5.5.9 Custom Search Urls
Collection of Google Custom Search urls to use when Custom Search is enabled.
3.5.5.10 Main Menu Type
The type of menu to render for use as an inter main page main menu (e.g.; link or button)
3.5.5.11 Main Menu Direction
Selectable direction LTR or RTL.
3.5.5.12 Main Menu Selection Html
Html which should be displayed in the main menu when this page is not being displayed (i.e.; not selected).
3.5.5.13 Main Menu Selected Html
Html which should be displayed in the main menu when this page is being displayed (i.e.; selected).
3.5.5.14 Background Image Urls
Collection of image urls to be used for the background. Empty set equals no background image. A collection size of 1 equals background image, and greater than 1 equals carousel.
3.5.5.15 Background Image Duration Seconds
Duration to display background image in carousel.
3.5.5.16 Content Menu Item Name
The Name displayed for the Item entry in the Content Menu. Unique to each page is a Content Menu, which provides access to a collection of <iframe> style disclosures or “animated subwindows” which can be activated via a button in the Content Menu, which is configured to display or disclose AJAX style (i.e.; without refreshing the page), a Google Sites site or some other url referenceable website or web app.
3.5.5.17 Content Menu Item Link
The Link used to access an Item entry in the Content Menu. The Content Menu, which is unique for each Page, provides sub menu style access to a collection of <iframe> style disclosures or “animated subwindows” which are activated by clicking a button in the Content Menu which discloses a Google Sites site or some other url referenceable website or web app.
3.5.5.18 Content Menu Style Sheet
Url which points to a stylesheet used to style the Content Menu.
3.5.5.19 Content Layout
Layout style which the content of a page adheres to. In the initial release, “Left Sidebar” will be supported, although the selection control should indicate other intended future selection options as indicated below.

Note - This parameter indicates the layout to be used for the content of the page as opposed to the content of the disclosures, which is determined by the settings of the individual Google Sites sites disclosed by the disclosure.
3.5.5.20 Content Header
The portion of the content layout reserved for text and/or HTML at the top of the page as shown below for the Content Layout parameter “Left Sidebar”.
3.5.5.21 Content Column One
The first or only column for Content Layouts as shown below for the parameter “Left Sidebar”.
3.5.5.22 Content Column Two
The second text/html column for layouts having two or more columns. Content defined for a column that does not exist in a defined Content Layout will not be rendered. For example, the layout “Left Sidebar” does not have a column two. Consequently content specified for the parameter Content Column Two would not be rendered if the Content Layout parameter was specified as “Left Sidebar”.
3.5.5.23 Content Column Three
The third text/html column for layouts having three columns. Content defined for a column that does not exist in a defined Content Layout will not be rendered. For example, the layout “Left Sidebar” does not have a column three. Consequently content specified for the parameter Content Column Three would not be rendered if the Content Layout parameter was specified as “Left Sidebar”.
3.5.5.24 Content Left Sidebar
The portion of the page reserved for text/html defining the left sidebar as shown below.
3.5.5.25 Content Right Sidebar
The portion of the page reserved for text/html defining the right sidebar. Content defined for a sidebar that does not exist in a defined Content Layout will not be rendered. For example, the layout “Left Sidebar” does not have a right sidebar. Consequently content specified for the parameter Content Right Sidebar would not be rendered if the Content Layout parameter was specified as “Left Sidebar”.
3.5.5.26 Content Footer
The portion of the content layout reserved for text and/or HTML at the bottom of the page as shown below for the Content Layout parameter “Left Sidebar”.
3.5.5.27 Message Header Text
Short summary of a message which is displayed to the user. Messages are used by the Client and Server Service Wrappers to display information to the user and optionally provide access to Information Items.
3.5.5.28 Message Body Text
Main text of a message which is displayed to the user. Messages are used by the Client and Server Service Wrappers to display information to the user and optionally provide access to Information Items.
3.5.5.29 Message Information Item
The link to an Information Item which corresponds to a message which is displayed to the user. Messages are used by the Client and Server Service Wrappers to display information to the user and optionally provide access to Information Items.
3.5.5.30 Message Html Color Code
The color of a message which is displayed to the user.
3.5.5.31 Message Width Percent Of Page
The width of a message displayed to a user expressed as a percentage of the browsers window width.
3.5.5.32 Message Percent Of Page From Left
The location of the left edge of the message expressed as a percentage to the browsers window width.
3.5.5.33 Message Percent Of Page From Top
The location of the top edge of the message expressed as a percentage to the browsers window height.
3.5.5.34 Message Duration Seconds
The duration the message should be displayed to the user when more than one message is to be displayed in a message carousel.
3.6 Software System Attributes
3.6.1 Reliability
3.6.2 Availability
3.6.3 Security
3.6.4 Maintainability
3.6.4 Portability
3.7 Other Requirements